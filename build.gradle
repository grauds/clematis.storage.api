plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'

    id 'com.github.spotbugs' version '6.0.7'
    id 'org.asciidoctor.jvm.convert' version '3.1.0'
    id 'jacoco'
    id 'checkstyle'
}

group = 'org.clematis'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    checkstyle "com.puppycrawl.tools:checkstyle:7.7"

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
  //  developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    compileOnly (
        "com.github.spotbugs:spotbugs:4.7.3",
        "com.google.code.findbugs:annotations:3.0.1u2"
    )

    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.apache.httpcomponents.client5:httpclient5'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'

    testCompileOnly "org.projectlombok:lombok:1.18.24"
    testCompileOnly (
            "com.github.spotbugs:spotbugs:4.7.1",
            "com.google.code.findbugs:annotations:3.0.1u2"
    )
}

// ------------ JaCoCo configuration  ---------
ext {
    setProperty('snippetsDir', file("build/generated-snippets"))
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    finalizedBy jacocoTestReport
    jacoco {
        destinationFile = file("jacoco/jacocoTest.exec")
        classDumpDir = file("jacoco/classpathdumps")
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = file('jacoco/html')
        xml.outputLocation = file('jacoco/jacoco.xml')
    }
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    executionData fileTree(project.rootDir.absolutePath).include("jacoco/*.exec")
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

// ------------ Spotbugs configuration  ---------
spotbugsMain {
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
    }
}

spotbugsTest {
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
        }
    }
}

// ------------ Checkstyle configuration  ---------
checkstyle {
    configProperties.configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionFile = file("${project.rootDir}/config/checkstyle/suppressions.xml")
}

tasks.register('checkstyleReport') {
    doLast {
        if (file("${buildDir}/reports/checkstyle/${project.ext.checkType}.xml").exists()) {
            ant.xslt(in: "${buildDir}/reports/checkstyle/${project.ext.checkType}.xml",
                    style: "${project.rootDir}/config/checkstyle/checkstyle.xsl",
                    out: "${buildDir}/reports/checkstyle/checkstyle_${project.ext.checkType}.html")
        }
    }
}

tasks.withType(Checkstyle).configureEach {
    exclude '**/*Test*'
}

tasks.named('test') {
    useJUnitPlatform()
}
